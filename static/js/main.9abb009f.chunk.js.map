{"version":3,"sources":["components/Input.js","components/List.js","components/TodoList.js","index.js"],"names":["Input","handleChange","e","props","style","backgroundColor","htmlFor","id","ref","inp","input","value","this","type","onChange","onClick","addTodo","Component","List","todos","arr1","filter","item","done","arr2","index","length","renderTodos","TodoList","setState","inpValue","target","state","title","alert","delTodo","idx","toggle","newTodos","JSON","parse","stringify","map","todo","checked","dangerouslySetInnerHTML","__html","localStorage","getItem","setItem","ReactDOM","render","document","getElementById"],"mappings":"6KAEqBA,E,4MACnBC,aAAe,SAACC,GACd,EAAKC,MAAMF,aAAaC,I,uDAEhB,IAAD,OACP,OACE,yBAAKE,MAAO,CAACC,gBAAgB,SAC3B,2BAAOC,QAAQ,OAAf,YACA,2BACEC,GAAG,MACHC,IAAK,SAAAC,GAAG,OAAE,EAAKC,MAAMD,GACrBE,MAAOC,KAAKT,MAAMQ,MAClBE,KAAK,OACLC,SAAUF,KAAKX,eACjB,4BAAQc,QAASH,KAAKT,MAAMa,SAA5B,qB,GAd2BC,aCAdC,E,uKAEjB,IAAIC,EAAQP,KAAKT,MAAMgB,MACnBC,EAAOD,EAAME,QAAO,SAAAC,GAAI,OAAGA,EAAKC,QAChCC,EAAOL,EAAME,QAAO,SAACC,EAAKG,GAC5B,OAAOH,EAAKC,QAEd,OACE,yBAAKnB,MAAO,CAACC,gBAAgB,SAC3B,uDAASe,EAAKM,QACd,4BACGd,KAAKT,MAAMwB,aAAY,IAE1B,uDAASH,EAAKE,QACd,4BACGd,KAAKT,MAAMwB,aAAY,S,GAfAV,aCEbW,E,kDACjB,aAAc,IAAD,8BACT,gBAOJ3B,aAAe,SAACC,GACZ,EAAK2B,SAAS,CAACC,SAAS5B,EAAE6B,OAAOpB,SATxB,EA4BbK,QAAU,WACH,EAAKgB,MAAMF,SACV,EAAKD,SAAS,CACVV,MAAM,CACF,CACIc,MAAM,EAAKD,MAAMF,SACjBP,MAAK,IAHR,mBAKE,EAAKS,MAAMb,UAKtBe,MAAM,yCAEV,EAAKF,MAAMF,SAAW,IA3Cb,EA8CbK,QAAU,SAACC,GACP,EAAKP,SAAS,CACVV,MAAM,EAAKa,MAAMb,MAAME,QAAO,SAACC,EAAKG,GAAN,OAAcA,IAAQW,QAhD/C,EAqDbC,OAAS,SAACD,GAGN,IAAIE,EAAWC,KAAKC,MAAMD,KAAKE,UAAU,EAAKT,MAAMb,QACpDmB,EAASF,GAAKb,MAAQe,EAASF,GAAKb,KACpC,EAAKM,SAAS,CACVV,MAAMmB,KA3DD,EA+DbX,YAAc,SAACJ,GACX,OAAO,EAAKS,MAAMb,MAAMuB,KAAI,SAACC,EAAKP,GAC9B,GAAGb,GAAQoB,EAAKpB,KACZ,OAAM,4BACN,2BACAR,QAAS,kBAAI,EAAKsB,OAAOD,IACzBQ,QAASrB,EACTV,KAAK,aACL,0BAAMgC,wBAAyB,CAACC,OAAOH,EAAKV,SAC5C,4BAAQlB,QAAS,kBAAI,EAAKoB,QAAQC,KAAlC,qBAtER,EAAKJ,MAAQ,CACTF,SAAS,GACTX,MAAM,IAJD,E,gEAaT,IAAIA,EAAQ4B,aAAaC,QAAQ,SAC9B7B,GACCP,KAAKiB,SAAS,CACVV,MAAMoB,KAAKC,MAAMrB,O,2CASzB,OAJA4B,aAAaE,QACT,QACAV,KAAKE,UAAU7B,KAAKoB,MAAMb,SAEvB,I,+BAsDP,OACI,6BAEI,kBAAC,EAAD,CACAR,MAAOC,KAAKoB,MAAMF,SAClBX,MAAOP,KAAKoB,MAAMb,MAClBH,QAASJ,KAAKI,QACdf,aAAcW,KAAKX,eACnB,kBAAC,EAAD,CACAkC,QAASvB,KAAKuB,QACdE,OAAQzB,KAAKyB,OACbV,YAAaf,KAAKe,YAClBG,SAAUlB,KAAKoB,MAAMF,SACrBX,MAAOP,KAAKoB,MAAMb,a,GA7FIF,aCQtCiC,IAASC,OAQP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.9abb009f.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n  handleChange = (e)=>{\r\n    this.props.handleChange(e)\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={{backgroundColor:'#ccc'}}>\r\n        <label htmlFor=\"inp\">todolist</label>\r\n        <input \r\n          id=\"inp\"\r\n          ref={inp=>this.input=inp}\r\n          value={this.props.value}\r\n          type=\"text\"\r\n          onChange={this.handleChange}/>\r\n        <button onClick={this.props.addTodo}>添加</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class List extends Component {\r\n  render() {\r\n    let todos = this.props.todos;\r\n    let arr1 = todos.filter(item=>!item.done);\r\n    let arr2 = todos.filter((item,index)=>{\r\n      return item.done;\r\n    })\r\n    return (\r\n      <div style={{backgroundColor:'#ccc'}}>\r\n        <h2>正在进行{arr1.length}</h2>\r\n        <ul>\r\n          {this.props.renderTodos(false)}\r\n        </ul>\r\n        <h2>已经完成{arr2.length}</h2>\r\n        <ul>\r\n          {this.props.renderTodos(true)}\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Input from './Input'\r\nimport List from './List'\r\n\r\nexport default class TodoList extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            inpValue:'',\r\n            todos:[]\r\n        }\r\n    }\r\n    //本地储存\r\n    handleChange = (e)=>{\r\n        this.setState({inpValue:e.target.value})\r\n     }\r\n     componentDidMount(){\r\n        // this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        if(todos){\r\n            this.setState({\r\n                todos:JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n        return true;\r\n    }\r\n     //添加\r\n    addTodo = ()=>{\r\n        if(this.state.inpValue){\r\n            this.setState({\r\n                todos:[\r\n                    {\r\n                        title:this.state.inpValue,\r\n                        done:false\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n            // this.state.inpValue = '';\r\n        }else{\r\n            alert(\"输入不能为空!\")\r\n        }\r\n        this.state.inpValue = '';\r\n    }\r\n    //删除\r\n    delTodo = (idx) =>{\r\n        this.setState({\r\n            todos:this.state.todos.filter((item,index)=>index!==idx)}\r\n        )\r\n        \r\n    }\r\n    //转换\r\n    toggle = (idx)=>{\r\n        //JSON.parse函数--将json字符串转换成json对象\r\n        //JSON.stringify()函数--将json对象转换成json字符串\r\n        let newTodos = JSON.parse(JSON.stringify(this.state.todos));\r\n        newTodos[idx].done = !newTodos[idx].done;\r\n        this.setState({\r\n            todos:newTodos\r\n        })\r\n    }\r\n    // 判断状态\r\n    renderTodos = (done) =>{\r\n        return this.state.todos.map((todo,idx)=>{  \r\n            if(done == todo.done){\r\n                return<li>\r\n                <input \r\n                onClick={()=>this.toggle(idx)}\r\n                checked={done} \r\n                type=\"checkbox\"/>\r\n                <span dangerouslySetInnerHTML={{__html:todo.title}}></span>\r\n                <button onClick={()=>this.delTodo(idx)}>删除\r\n                </button>\r\n            </li>\r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <label htmlFor=\"inp\">todolist</label> */}\r\n                <Input \r\n                value={this.state.inpValue}\r\n                todos={this.state.todos}\r\n                addTodo={this.addTodo}\r\n                handleChange={this.handleChange}/>\r\n                <List \r\n                delTodo={this.delTodo}\r\n                toggle={this.toggle}\r\n                renderTodos={this.renderTodos}\r\n                inpValue={this.state.inpValue}\r\n                todos={this.state.todos}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import Contorl from './components/Contorl';\n// 前两个必须要有\n// import Home from './pages/Home';\n// import Demo01 from './pages/Demo01';\n// import App from './pages/App';\n// import Hoc,{Detail} from './pages/Hoc';\n\n// import Hook from './pages/Hook';\n// import Context from './pages/context';\nimport TodoList from './components/TodoList';\nReactDOM.render(\n  // <Contorl />,\n  // <Demo01 name='123'/>,\n  // <App/>,\n  // <div><Hoc/><Detail/></div>,\n  // <Context.Provider value='123'>\n  //    <Hook/>\n  // </Context.Provider>,\n  <TodoList/>,\n  document.getElementById('root')\n)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 一、JSX语法——时间周期函数\n//  setInterval(()=>{\n//     let ele = <h1 id='title' className='tit'>\n//     react\n//     <div>当前时间</div>\n//     {new Date().toLocaleString()}\n//     </h1>;\n\n//     ReactDOM.render(\n//     ele,\n//     document.getElementById('root')\n//   )\n//  },1000);\n\n// 二、组件\n// 1.函数定义组件：没有什么逻辑\n// UI组件（展示）组件，木偶组件\n// function App(props){\n//   const {title,id} = props;\n//   return <div>\n//     <h1>App组件内容</h1>\n//     <div>{title}</div>\n//     <div>{id}</div>\n//     <div>hello</div>\n//   </div>\n// }\n// ReactDOM.render(\n//   <App title = 'abc' id='app'/>,  //可传任意值\n//   document.getElementById('root')\n// );\n\n// 2.智能组件——类组件 生命周期\n// class Demo extends React.Component{\n//   constructor(){\n//     super();\n//     // 声明状态\n//     this.state = {\n//       name:'tom'\n//     }\n//     setTimeout(()=>{\n//       this.setState({name:'jerry'})\n//     },500)\n//   }\n//   render(){\n//     return <div>\n//       <div>name:{this.state.name}</div>\n//       <App title = {this.state.name} id='app'/>  \n//     </div>\n//   }\n// }\n// ReactDOM.render(\n//   <Demo title = 'abc' id='app'/>,  //可传任意值\n//   document.getElementById('root')\n// );\n\n// 类组件练习——时间周期\n// class Home extends React.Component{\n//   constructor(){\n//     super();\n//     this.state = {\n//       data:[1,2,3]\n//     }\n//     setTimeout(()=>{\n//       this.setState({data:[5,6,7,8,9]})\n//     },1000)\n//   }\n//   render(){\n//     return <ul>\n//       {\n//         this.state.data.map(\n//           (item)=><li>{item}</li>\n//         )\n//       }\n//     </ul>\n//   }\n// }\n// ReactDOM.render(\n//   <Home />,\n//   document.getElementById('root')\n// );\n\n\n// 三、元素渲染\n// let ele = <h1 id='title' className='tit'>\n// react\n// <div>hello</div> \n// <div>{['hello','world']}</div> \n// <div>hello</div> \n// </h1>;\n\n// let ele = React.createElement(\n//   'h1',\n//   {id:'title'},\n//   React.createElement('div',{},'hello'),\n//   'recat')\n\n// 将jsx对象渲染到DOM中\n// let ReactDOM = {\n//   render(eleObj,container){\n//     // 解构\n//     const { type,props } = eleObj;\n//     // 创建第一层节点\n//     let ele = document.createElement(type);\n//     // 遍历属性对象，将属性添加到第一层节点对象上\n//     for(const prop in props){\n//       if(prop == 'children'){\n//         if(typeof props.children == 'string'){\n//           const txtNode = document.createTextNode(props.children);\n//           ele.appendChild(txtNode);\n//           break;\n//         }\n\n//         // 将第一层节点对象的子元素添加进去\n//         props.children.forEach(child => {\n//           if(typeof child == 'string'){\n//             const txtNode = document.createTextNode(child);\n//             ele.appendChild(txtNode);\n           \n//           }else{\n//             ReactDOM.render(child,ele);\n//           }\n          \n//         })\n//       }else{\n//         ele[prop] = props[prop];\n//       }\n//     }\n//     // 将第一层DOM节点添加到container\n\n//     container.appendChild(ele);\n//   }\n// }\n// ReactDOM.render(\n//   ele,\n//   document.getElementById('root')\n// );\n\n// 快捷键\n// Ctrl 左右键 以单词为单位跳格\n// alt 鼠标单击\n// ctrl shift 左右键 选中单词\n// ctrl shift L\n\n\n\n// 报错\n// let List = (props)=>{\n//   return <ul>\n//     {\n//       props.data.map(\n//         (item) => <li>{item.title}</li>\n//       )\n//     }\n//   </ul>\n// }\n// const Buttons = () =>{\n// const btns = [1,2,3,4,5];\n// const handleClick =(num)=>{\n//     // 事件对象\n//     console.log(num);\n//   }\n// }\n// return<div>\n//     {\n//       btns.map(\n//         (item)=>\n//         <button \n//         key={item}\n//         onClick={()=>handleClick(item)}\n//         >\n//           {item}\n//         </button>)\n//     }\n// </div>\n// ReactDOM.render(\n//     <List />,\n//   document.getElementById('root')\n// )\n\n\n"],"sourceRoot":""}